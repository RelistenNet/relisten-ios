# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.99.0"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    # cocoapods
    
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  lane :local_register_devices do
    register_devices(
      devices: {
        "Alec's iPhone 11 Pro" => "00008030-001944A23E10802E",
      }
    ) # Simply provide a list of devices as a Hash
  end    

  lane :setup_certs do
    match(git_url: "git@bitbucket.org:relistennet/ios-certificates.git",
      type: "development",
      template_name: "CarPlay Audio App(Development)", 
      force_for_new_devices: true
    )

    match(git_url: "git@bitbucket.org:relistennet/ios-certificates.git",
      type: "appstore", 
      template_name: "CarPlay Audio App(Distribution)"
    )
  end

  desc "Bumps the minor version number"
  desc "This is useful if you want to submit a new TestFlight build after releasing a build"
  lane :bump do
    increment_version_number(bump_type: "patch", xcodeproj: "Relisten.xcodeproj")
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # get_certificates           # invokes cert
    # get_provisioning_profile   # invokes sigh
    # sync_code_signing

    match(git_url: "git@bitbucket.org:relistennet/ios-certificates.git", 
      type: "appstore",
      template_name: "CarPlay Audio App(Distribution)"
      )

    # Ensure that your git status is not dirty
    ensure_git_status_clean

    # Increment the build number (not the version number)
    increment_build_number(xcodeproj: "Relisten.xcodeproj")

    build_app(scheme: "Relisten")

    current_dir = File.expand_path File.dirname(__FILE__)
    changelog = File.read(current_dir + "/changelog.txt")

    upload_to_testflight(
      changelog: changelog,
      distribute_external: true
    )
    
    # Commit the version bump
    commit_version_bump(xcodeproj: "Relisten.xcodeproj")

    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
    add_git_tag

    # Push the new commit and tag back to your git remote
    push_to_git_remote

  end

  lane :upload do
    match(git_url: "git@bitbucket.org:relistennet/ios-certificates.git", 
      type: "appstore",
      template_name: "CarPlay Audio App(Distribution)"
      )

    # Ensure that your git status is not dirty
    ensure_git_status_clean

    # Increment the build number (not the version number)
    increment_build_number(xcodeproj: "Relisten.xcodeproj")

    build_app(scheme: "Relisten")

    upload_to_app_store(
      skip_screenshots: true,
      skip_metadata: true,
      skip_app_version_update: true
    )

    # Commit the version bump
    commit_version_bump(xcodeproj: "Relisten.xcodeproj")

    # Add a git tag for this build. This will automatically
    # use an appropriate git tag name
    add_git_tag

    # Push the new commit and tag back to your git remote
    push_to_git_remote
  end

  lane :screenshots do
    capture_screenshots
    # upload_to_app_store
  end

  # desc "Deploy a new version to the App Store"
  # lane :appstore do
    # match(type: "appstore")
    # snapshot
    # gym(scheme: "Relisten") # Build your app - more options available
    # deliver(force: true)
    # frameit
  # end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
